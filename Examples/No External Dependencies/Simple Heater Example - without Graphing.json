[
    {
        "id": "67b9836eb090a152",
        "type": "tab",
        "label": "Simple Heater Example - w/o Graphing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "95a909403a40a248",
        "type": "pid-complete",
        "z": "67b9836eb090a152",
        "name": "Heater PID",
        "sampleInterval": 1,
        "outMin": 0,
        "outMax": "100",
        "disabledOut": "0",
        "PonM": false,
        "x": 550,
        "y": 540,
        "wires": [
            [
                "255f272470af0153",
                "8b6261c28f2a652f"
            ]
        ],
        "info": "Output is +100 which signifies a heating PID."
    },
    {
        "id": "723087801f526ea3",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "temperature",
        "payloadType": "global",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "08905ef871bb9b1d"
            ]
        ],
        "info": "This is just inserting the current temp on a regular basis. It is pulling the current temp from a global variable which is set in simulation calculation function block."
    },
    {
        "id": "04c3d901743c1726",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "Kp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "kp",
        "payload": ".75",
        "payloadType": "num",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "08905ef871bb9b1d"
            ]
        ]
    },
    {
        "id": "52511ecddf1eaa8a",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "Ki",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "ki",
        "payload": "0.00426",
        "payloadType": "num",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "08905ef871bb9b1d"
            ]
        ]
    },
    {
        "id": "22a71e0b5d304403",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "Kd",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "kd",
        "payload": "8.2793",
        "payloadType": "num",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "08905ef871bb9b1d"
            ]
        ]
    },
    {
        "id": "46fcbe574f1f4c4d",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "SP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "setpoint",
        "payload": "60",
        "payloadType": "num",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "08905ef871bb9b1d"
            ]
        ]
    },
    {
        "id": "255f272470af0153",
        "type": "function",
        "z": "67b9836eb090a152",
        "name": "Oversimplified Heated Kettle",
        "func": "let currentTemp = context.get(\"currentTemp\");\nlet currentPower = context.get(\"currentPower\");\nlet outterV = context.get(\"outterV\");\nlet outterSA = context.get(\"outterSA\");\nlet lastTime = context.get(\"lastTime\") || Date.now();\n\nlet ambientTemp = 10;\n\nlet now = Date.now();\nlet dT = (now - lastTime) / 1000; //seconds\n\nlet powerLostAmbient = 100 * outterSA * (currentTemp - ambientTemp);\nlet netPower = currentPower - powerLostAmbient;\n\nlet outletTemp = currentTemp + (netPower * dT) / (4.184 * outterV);\n\nif (msg.hasOwnProperty(\"payload\")) {\n    let tempPower = parseFloat(msg.payload);\n    if (!isNaN(tempPower)) currentPower = (tempPower / 100) * 10000; //100% power - 5000 W\n}\n\nlet outletMsg = {\n    payload: outletTemp\n};\n\n\noutletTemp = outletTemp > 100 ? 100 : outletTemp; //limit to boiling range\n\ncontext.set(\"currentTemp\", outletTemp);\ncontext.set(\"currentPower\", currentPower);\ncontext.set(\"lastTime\", now);\n\nreturn outletMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n//surface area of pot of water\nlet outterV = 2000; //mL\nlet outterR = 1.5; //cm\nlet outterSA = 2 * (Math.PI * Math.pow(outterR, 3) + outterV) / outterR; //surface area of cylinder, cm3\noutterSA = outterSA / 10000; //cm2 to m2\n\ncontext.set(\"outterSA\", outterSA);\ncontext.set(\"outterV\", outterV);\n\ncontext.set(\"currentTemp\", 20); //Â°C\ncontext.set(\"currentPower\", 0); //percent",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 540,
        "wires": [
            [
                "d9fd1673142d172b",
                "a04d5fc99e8a0905"
            ]
        ]
    },
    {
        "id": "e7f7f8aaaab8e20a",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "Auto",
        "props": [
            {
                "p": "cmd",
                "v": "auto",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": ".5",
        "topic": "",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "08905ef871bb9b1d"
            ]
        ]
    },
    {
        "id": "b719c37970831cfb",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "Manual",
        "props": [
            {
                "p": "cmd",
                "v": "manual",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "50",
        "payloadType": "num",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "08905ef871bb9b1d"
            ]
        ]
    },
    {
        "id": "08905ef871bb9b1d",
        "type": "pid-complete-autotune",
        "z": "67b9836eb090a152",
        "name": "PID Autotune",
        "outDec": 0,
        "outInc": "100",
        "disabledOut": 0,
        "rule": "pid",
        "after": "auto",
        "stepPercent": "10",
        "x": 370,
        "y": 540,
        "wires": [
            [
                "95a909403a40a248"
            ]
        ],
        "info": "PID autotune settings need to match settings in PID node."
    },
    {
        "id": "612110ec9217846d",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "Autotune",
        "props": [
            {
                "p": "cmd",
                "v": "autotune",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.2",
        "topic": "",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "08905ef871bb9b1d"
            ]
        ]
    },
    {
        "id": "d9fd1673142d172b",
        "type": "change",
        "z": "67b9836eb090a152",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ae96bda3be0cb78d",
        "type": "inject",
        "z": "67b9836eb090a152",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "20",
        "payloadType": "num",
        "x": 870,
        "y": 480,
        "wires": [
            [
                "d9fd1673142d172b"
            ]
        ]
    },
    {
        "id": "75e9e931d916bfca",
        "type": "comment",
        "z": "67b9836eb090a152",
        "name": "Mandatory Settings",
        "info": "Kp, Ki, Kd, and SP must be set every time the node is started before the Auto PID function can be activated.",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "2a7eb8409b03b872",
        "type": "comment",
        "z": "67b9836eb090a152",
        "name": "Commands",
        "info": "Manual, Auto, and Disable control the PID function.",
        "x": 150,
        "y": 260,
        "wires": []
    },
    {
        "id": "f29230ecc42c60e7",
        "type": "comment",
        "z": "67b9836eb090a152",
        "name": "Autotune",
        "info": "Autotune starts the autotuning function, which sets the PID into Manual control and runs the autotune.",
        "x": 160,
        "y": 400,
        "wires": []
    },
    {
        "id": "1423a5f31c94a18d",
        "type": "comment",
        "z": "67b9836eb090a152",
        "name": "Send in Temp",
        "info": "PV (temperature in this example) needs to be sent into the PID at a regular interval.",
        "x": 150,
        "y": 500,
        "wires": []
    },
    {
        "id": "d69805e470ef8ec9",
        "type": "comment",
        "z": "67b9836eb090a152",
        "name": "Initialize Temp",
        "info": "Initializes the temperature global variable since this isn't a real sensor.",
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "8b6261c28f2a652f",
        "type": "debug",
        "z": "67b9836eb090a152",
        "name": "Power",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 600,
        "wires": []
    },
    {
        "id": "a04d5fc99e8a0905",
        "type": "debug",
        "z": "67b9836eb090a152",
        "name": "Temperature",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 600,
        "wires": []
    }
]